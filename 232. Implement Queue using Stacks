#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

// Queue structure
typedef struct Queue {
    int *arr;
    int front;
    int rear;
    int size;
    int capacity;
} Queue;

// Function to initialize a queue
Queue* createQueue(int capacity) {
    Queue* queue = (Queue*)malloc(sizeof(Queue));
    queue->capacity = capacity;
    queue->front = 0;
    queue->rear = -1;
    queue->size = 0;
    queue->arr = (int*)malloc(sizeof(int) * capacity);
    return queue;
}

// Function to check if the queue is empty
bool isEmpty(Queue* queue) {
    return queue->size == 0;
}

// Function to add an element to the queue
void enqueue(Queue* queue, int value) {
    if (queue->size == queue->capacity) {
        printf("Queue is full\n");
        return;
    }
    queue->arr[++queue->rear] = value;
    queue->size++;
}

// Function to remove an element from the queue
int dequeue(Queue* queue) {
    if (isEmpty(queue)) {
        printf("Queue is empty\n");
        return -1;
    }
    int frontValue = queue->arr[queue->front];
    queue->front++;
    queue->size--;
    return frontValue;
}

// Function to get the front element of the queue
int front(Queue* queue) {
    if (isEmpty(queue)) {
        printf("Queue is empty\n");
        return -1;
    }
    return queue->arr[queue->front];
}

// Function to clear the queue
void clearQueue(Queue* queue) {
    free(queue->arr);
    free(queue);
}

// MyStack structure
typedef struct MyStack {
    Queue *q1;
    Queue *q2;
} MyStack;

// Function to initialize the stack
MyStack* createStack() {
    MyStack* stack = (MyStack*)malloc(sizeof(MyStack));
    stack->q1 = createQueue(100);
    stack->q2 = createQueue(100);
    return stack;
}

// Function to push an element onto the stack
void push(MyStack* stack, int x) {
    enqueue(stack->q1, x);
}

// Function to pop an element from the stack
int pop(MyStack* stack) {
    while (stack->q1->size > 1) {
        enqueue(stack->q2, dequeue(stack->q1));
    }
    int topElement = dequeue(stack->q1);
    
    // Swap q1 and q2
    Queue* temp = stack->q1;
    stack->q1 = stack->q2;
    stack->q2 = temp;
    
    return topElement;
}

// Function to get the top element of the stack
int top(MyStack* stack) {
    while (stack->q1->size > 1) {
        enqueue(stack->q2, dequeue(stack->q1));
    }
    int topElement = front(stack->q1);
    
    // Move the element back to q2
    enqueue(stack->q2, dequeue(stack->q1));
    
    // Swap q1 and q2
    Queue* temp = stack->q1;
    stack->q1 = stack->q2;
    stack->q2 = temp;
    
    return topElement;
}

// Function to check if the stack is empty
bool empty(MyStack* stack) {
    return isEmpty(stack->q1);
}

// Function to free the stack
void freeStack(MyStack* stack) {
    clearQueue(stack->q1);
    clearQueue(stack->q2);
    free(stack);
}

// Example usage
int main() {
    MyStack* myStack = createStack();
    
    push(myStack, 1);
    push(myStack, 2);
    printf("Top element: %d\n", top(myStack)); // Output: 2
    printf("Popped element: %d\n", pop(myStack)); // Output: 2
    printf("Is stack empty? %d\n", empty(myStack)); // Output: 0 (false)
    
    freeStack(myStack);
    
    return 0;
}
