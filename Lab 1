#include <stdio.h>
#include <stdlib.h>

typedef struct ListNode {
    int val;
    struct ListNode *next;
} ListNode;

ListNode* removeElements(ListNode* head, int val) {
    ListNode* dummy = (ListNode*)malloc(sizeof(ListNode)); // Create a dummy node
    dummy->next = head;
    ListNode* current = dummy;

    while (current->next) {
        if (current->next->val == val) {
            ListNode* temp = current->next;
            current->next = current->next->next;
            free(temp); // Free the removed node
        } else {
            current = current->next;
        }
    }

    ListNode* newHead = dummy->next;
    free(dummy); // Free the dummy node
    return newHead;
}

// Helper function to create a new node
ListNode* createNode(int val) {
    ListNode* newNode = (ListNode*)malloc(sizeof(ListNode));
    newNode->val = val;
    newNode->next = NULL;
    return newNode;
}

// Helper function to print the linked list
void printList(ListNode* head) {
    while (head) {
        printf("%d -> ", head->val);
        head = head->next;
    }
    printf("NULL\n");
}

// Helper function to free the linked list
void freeList(ListNode* head) {
    while (head) {
        ListNode* temp = head;
        head = head->next;
        free(temp);
    }
}

// Example usage
int main() {
    // Creating linked list: 1 -> 2 -> 6 -> 3 -> 4 -> 5 -> 6
    ListNode* head = createNode(1);
    head->next = createNode(2);
    head->next->next = createNode(6);
    head->next->next->next = createNode(3);
    head->next->next->next->next = createNode(4);
    head->next->next->next->next->next = createNode(5);
    head->next->next->next->next->next->next = createNode(6);

    printf("Original list:\n");
    printList(head);

    int val = 6;
    head = removeElements(head, val);

    printf("Modified list after removing %d:\n", val);
    printList(head);

    freeList(head);
    return 0;
}
