#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

// Define stack structure
typedef struct {
    int data[100];  // Fixed size stack, can be dynamically allocated for larger input
    int top;
} Stack;

// Initialize stack
void initStack(Stack *s) {
    s->top = -1;
}

// Check if stack is empty
bool isEmpty(Stack *s) {
    return s->top == -1;
}

// Push element onto stack
void pushStack(Stack *s, int x) {
    s->data[++(s->top)] = x;
}

// Pop element from stack
int popStack(Stack *s) {
    if (!isEmpty(s)) {
        return s->data[(s->top)--];
    }
    return -1; // Should not happen as per problem constraints
}

// Peek top element of stack
int peekStack(Stack *s) {
    if (!isEmpty(s)) {
        return s->data[s->top];
    }
    return -1;
}

// Define Queue structure using two stacks
typedef struct {
    Stack stack1;  // Primary stack for push
    Stack stack2;  // Secondary stack for pop
} MyQueue;

// Initialize queue
void myQueueInit(MyQueue *obj) {
    initStack(&obj->stack1);
    initStack(&obj->stack2);
}

// Push element x to the back of the queue
void myQueuePush(MyQueue *obj, int x) {
    pushStack(&obj->stack1, x);
}

// Move elements from stack1 to stack2 if stack2 is empty
void transferStack1ToStack2(MyQueue *obj) {
    if (isEmpty(&obj->stack2)) {
        while (!isEmpty(&obj->stack1)) {
            pushStack(&obj->stack2, popStack(&obj->stack1));
        }
    }
}

// Removes and returns the front element of the queue
int myQueuePop(MyQueue *obj) {
    transferStack1ToStack2();  // Ensure stack2 has the oldest elements
    return popStack(&obj->stack2);
}

// Get the front element
int myQueuePeek(MyQueue *obj) {
    transferStack1ToStack2();  // Ensure stack2 has the oldest elements
    return peekStack(&obj->stack2);
}

// Check if queue is empty
bool myQueueEmpty(MyQueue *obj) {
    return isEmpty(&obj->stack1) && isEmpty(&obj->stack2);
}

// Free queue (not needed for this implementation)
void myQueueFree(MyQueue *obj) {
    // No dynamic memory was allocated, so nothing to free
}

// Main function to test MyQueue
int main() {
    MyQueue myQueue;
    myQueueInit(&myQueue);

    myQueuePush(&myQueue, 1);  // queue: [1]
    myQueuePush(&myQueue, 2);  // queue: [1, 2]

    printf("%d\n", myQueuePeek(&myQueue)); // Output: 1
    printf("%d\n", myQueuePop(&myQueue));  // Output: 1
    printf("%d\n", myQueueEmpty(&myQueue)); // Output: 0 (false)

    return 0;
}
