#include <stdio.h>

void dfs(char grid[][300], int i, int j, int m, int n) {
    // Base case: If out of bounds or water ('0')
    if (i < 0 || i >= m || j < 0 || j >= n || grid[i][j] == '0') {
        return;
    }
    
    // Mark the current land cell as visited
    grid[i][j] = '0';
    
    // Explore all four directions (up, down, left, right)
    dfs(grid, i + 1, j, m, n); // down
    dfs(grid, i - 1, j, m, n); // up
    dfs(grid, i, j + 1, m, n); // right
    dfs(grid, i, j - 1, m, n); // left
}

int numIslands(char grid[][300], int m, int n) {
    int islandCount = 0;
    
    // Traverse each cell of the grid
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            // If we find land, start DFS and mark all connected lands as visited
            if (grid[i][j] == '1') {
                dfs(grid, i, j, m, n);
                islandCount++;
            }
        }
    }
    
    return islandCount;
}

int main() {
    // Example 1
    char grid1[4][5] = {
        {'1', '1', '1', '1', '0'},
        {'1', '1', '0', '1', '0'},
        {'1', '1', '0', '0', '0'},
        {'0', '0', '0', '0', '0'}
    };
    int m1 = 4, n1 = 5;
    printf("Number of islands in grid1: %d\n", numIslands(grid1, m1, n1));

    // Example 2
    char grid2[4][5] = {
        {'1', '1', '0', '0', '0'},
        {'1', '1', '0', '0', '0'},
        {'0', '0', '1', '0', '0'},
        {'0', '0', '0', '1', '1'}
    };
    int m2 = 4, n2 = 5;
    printf("Number of islands in grid2: %d\n", numIslands(grid2, m2, n2));

    return 0;
}
